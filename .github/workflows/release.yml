name: Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - pre
      changelog:
        description: 'Custom changelog entry (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (no PR creation)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current
        run: |
          VERSION=$(grep -m1 -oP '^version = "\K[^"]+' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Test version bump
        id: bump
        run: |
          chmod +x scripts/bump_version.py

          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "=== ACTUAL VERSION BUMP ==="
            if [ -n "${{ github.event.inputs.changelog }}" ]; then
              python scripts/bump_version.py ${{ github.event.inputs.bump_type }} \
                --changelog "${{ github.event.inputs.changelog }}"
            else
              python scripts/bump_version.py ${{ github.event.inputs.bump_type }}
            fi

            uv lock --no-progress

            NEW_VERSION=$(grep -m1 -oP '^version = "\K[^"]+' pyproject.toml)
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION"
          else
            echo "DRY RUN - No changes made"
            echo "version=$VERSION-dryrun" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch and PR
        if: github.event.inputs.dry_run != 'true'
        run: |
          BRANCH_NAME="release/v${{ steps.bump.outputs.version }}"

          # Clean up any existing branch from previous attempts
          if git ls-remote --exit-code --heads origin $BRANCH_NAME; then
            echo "‚ö†Ô∏è  Branch $BRANCH_NAME already exists. Deleting it first..."
            git push origin --delete $BRANCH_NAME
          fi

          # Clean up local branch if exists
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            git branch -D $BRANCH_NAME
          fi

          # Create fresh branch
          git checkout -b $BRANCH_NAME

          # Add all changes (version bump, CHANGELOG, etc.)
          git add -A

          # Commit with co-author
          git commit -m "chore: bump version to ${{ steps.bump.outputs.version }}

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          # Push the branch
          git push origin $BRANCH_NAME

          # Verify the version was committed correctly
          echo "=== Verifying committed version ==="
          COMMITTED_VERSION=$(git show HEAD:pyproject.toml | grep -m1 -oP '^version = "\K[^"]+')
          echo "Committed version: $COMMITTED_VERSION"
          if [ "$COMMITTED_VERSION" != "${{ steps.bump.outputs.version }}" ]; then
            echo "‚ùå ERROR: Version not committed correctly!"
            exit 1
          fi
          echo "‚úì Version correctly committed"

      - name: Create Pull Request
        if: github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME="release/v${{ steps.bump.outputs.version }}"

          # Create PR using GitHub CLI
          gh pr create \
            --base main \
            --head $BRANCH_NAME \
            --title "Release v${{ steps.bump.outputs.version }}" \
            --body "## üöÄ Release v${{ steps.bump.outputs.version }}

          This PR was automatically created by the release workflow.

          ### Changes
          - Version bumped from ${{ steps.current.outputs.version }} to ${{ steps.bump.outputs.version }}
          - Updated CHANGELOG.md
          - Updated uv.lock

          ### Pre-release Checklist
          - [ ] Review CHANGELOG.md entries
          - [ ] Verify version numbers are correct
          - [ ] All tests passing
          - [ ] Documentation updated (if needed)

          ### Release Process
          1. Approve and merge this PR
          2. The release workflow will automatically:
             - Build and test the package
             - Publish to Test PyPI
             - Wait for approval
             - Publish to PyPI
             - Create a GitHub release
             - Tag the release

          ---
          *Triggered by @${{ github.actor }}*"

      - name: Summary
        run: |
          echo "## Release Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "‚úÖ **DRY RUN COMPLETED**" >> $GITHUB_STEP_SUMMARY
            echo "No changes were made" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Release PR Created**" >> $GITHUB_STEP_SUMMARY
            echo "- Previous version: ${{ steps.current.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- New version: ${{ steps.bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: release/v${{ steps.bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi

  test-and-build:
    name: Test and Build
    needs: prepare-release
    if: github.event.inputs.dry_run != 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: release/v${{ needs.prepare-release.outputs.version }}

      - name: Verify version before build
        run: |
          EXPECTED_VERSION="${{ needs.prepare-release.outputs.version }}"
          ACTUAL_VERSION=$(grep -m1 -oP '^version = "\K[^"]+' pyproject.toml)

          echo "Expected version: $EXPECTED_VERSION"
          echo "Actual version: $ACTUAL_VERSION"

          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå ERROR: Version mismatch!"
            echo "Expected $EXPECTED_VERSION but found $ACTUAL_VERSION"
            exit 1
          fi

          echo "‚úì Version verified: $ACTUAL_VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup build environment
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install build twine

      - name: Build and check package
        run: |
          source .venv/bin/activate
          uv build
          twine check dist/*

          echo "=== Package contents ==="
          python -m zipfile -l dist/*.whl | head -20

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-testpypi:
    name: Publish to TestPyPI
    needs: test-and-build
    runs-on: ubuntu-latest
    environment:
      name: test-pypi

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  release-approval:
    name: Release Approval
    needs: publish-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi-approval

    steps:
      - name: Approval checkpoint
        run: |
          echo "‚úì TestPyPI deployment successful"
          echo "‚úì Package available at: https://test.pypi.org/project/bedrock-agentcore/"
          echo ""
          echo "‚ö†Ô∏è  MANUAL APPROVAL REQUIRED"
          echo ""
          echo "Before approving production release:"
          echo "1. Test the package from TestPyPI:"
          echo "   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ bedrock-agentcore"
          echo ""
          echo "2. Verify the package works correctly"
          echo "3. Check version number is correct"
          echo "4. Review package contents"
          echo ""
          echo "Only approve if everything looks good!"

  publish-pypi:
    name: Publish to PyPI
    needs: release-approval
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/bedrock-agentcore/

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Get version
        id: version
        run: |
          VERSION=$(ls dist/*.whl | sed -n 's/.*-\([0-9.]*\)-.*/\1/p')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create and push tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
          git push origin v${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Bedrock AgentCore SDK v${{ steps.version.outputs.version }}
          files: dist/*
          generate_release_notes: true
          body: |
            ## Installation
            ```bash
            pip install bedrock-agentcore==${{ steps.version.outputs.version }}
            ```

            ## What's Changed
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v${{ steps.version.outputs.version }}/CHANGELOG.md) for details.
